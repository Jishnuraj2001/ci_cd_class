// Generated by CoffeeScript 1.9.3
(function() {
  var assert, describe, ref,
    slice = [].slice;

  ref = require("./helpers"), assert = ref.assert, describe = ref.describe;

  describe("Reactive programming functions", function(context) {
    var FS, async, curry, flow, iterator, pump, reduce, start, tee, throttle;
    FS = require("fs");
    reduce = require("./iterator").reduce;
    flow = function(arg) {
      var fx, i;
      i = arg[0], fx = 2 <= arg.length ? slice.call(arg, 1) : [];
      return reduce(i, (function(i, f) {
        return f(i);
      }), fx);
    };
    context.test("flow", function*() {
      var events, i, lines, ref1;
      ref1 = require("./iterator"), events = ref1.events, lines = ref1.lines;
      i = flow([events("data", FS.createReadStream("./test/lines.txt")), lines]);
      assert(((yield i())).value === "one");
      assert(((yield i())).value === "two");
      assert(((yield i())).value === "three");
      return assert((yield i().done));
    });
    async = require("./generator").async;
    start = async(function*(i) {
      var done, ref1, results, value;
      results = [];
      while (true) {
        ref1 = (yield i()), done = ref1.done, value = ref1.value;
        if (done) {
          break;
        } else {
          results.push(void 0);
        }
      }
      return results;
    });
    curry = require("./core").curry;
    iterator = require("./iterator").iterator;
    pump = curry(function(s, i) {
      return iterator(function*() {
        var done, ref1, value;
        ref1 = (yield i()), done = ref1.done, value = ref1.value;
        if (!done) {
          return {
            value: s.write(value),
            done: false
          };
        } else {
          s.end();
          return {
            done: done
          };
        }
      });
    });
    curry = require("./core").curry;
    iterator = require("./iterator").iterator;
    tee = curry(function(f, i) {
      return iterator(function*() {
        var done, ref1, value;
        ref1 = (yield i()), done = ref1.done, value = ref1.value;
        if (!done) {
          f(value);
        }
        return {
          done: done,
          value: value
        };
      });
    });
    throttle = curry(function(ms, i) {
      var last;
      last = 0;
      return iterator(function*() {
        var done, now, ref1, value;
        while (true) {
          ref1 = (yield i()), done = ref1.done, value = ref1.value;
          if (done) {
            break;
          }
          now = Date.now();
          if (now - last >= ms) {
            break;
          }
        }
        last = now;
        return {
          done: done,
          value: value
        };
      });
    });
    return module.exports = {
      flow: flow,
      start: start,
      pump: pump,
      tee: tee,
      throttle: throttle
    };
  });

}).call(this);
