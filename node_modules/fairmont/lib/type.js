// Generated by CoffeeScript 1.9.3
(function() {
  var assert, curry, deepEqual, describe, ref, ref1;

  ref = require("./core"), curry = ref.curry, deepEqual = ref.deepEqual;

  ref1 = require("./helpers"), describe = ref1.describe, assert = ref1.assert;

  describe("Type functions", function(context) {
    var GeneratorFunction, instanceOf, isArray, isBoolean, isDate, isDefined, isFinite, isFloat, isFunction, isGenerator, isInteger, isNaN, isNumber, isObject, isPromise, isRegexp, isString, isType, type;
    type = function(x) {
      return x != null ? x.constructor : void 0;
    };
    context.test("type");
    isType = curry(function(t, x) {
      return type(x) === t;
    });
    context.test("isType");
    instanceOf = curry(function(t, x) {
      return x instanceof t;
    });
    context.test("instanceOf");
    isNumber = isType(Number);
    context.test("isNumber", function() {
      assert(isNumber(7));
      assert(!isNumber("7"));
      return assert(!isNumber(false));
    });
    isNaN = function(n) {
      return Number.isNaN(n);
    };
    isFinite = function(n) {
      return Number.isFinite(n);
    };
    isInteger = function(n) {
      return Number.isInteger(n);
    };
    context.test("isInteger", function() {
      assert(isInteger(5));
      assert(!isInteger(3.5));
      assert(!isInteger("5"));
      return assert(!isInteger(NaN));
    });
    isFloat = function(n) {
      return n === +n && n !== (n | 0);
    };
    context.test("isFloat", function() {
      assert(isFloat(3.5));
      assert(!isFloat(5));
      assert(!isFloat("3.5"));
      return assert(!isFloat(NaN));
    });
    isBoolean = isType(Boolean);
    context.test("isBoolean", function() {
      assert(isBoolean(true));
      return assert(!isBoolean(7));
    });
    isDate = isType(Date);
    context.test("isDate", function() {
      assert(isDate(new Date));
      return assert(!isDate(7));
    });
    isRegexp = isType(RegExp);
    context.test("isRegexp", function() {
      assert(isRegexp(/\s/));
      return assert(!isRegexp(7));
    });
    isString = isType(String);
    context.test("isString", function() {
      assert(isString("x"));
      return assert(!isString(7));
    });
    isFunction = isType(Function);
    context.test("isFunction", function() {
      assert(isFunction(function() {}));
      return assert(!isFunction(7));
    });
    isObject = isType(Object);
    context.test("isObject", function() {
      assert(isObject({}));
      return assert(!isObject(7));
    });
    isArray = isType(Array);
    context.test("isArray", function() {
      assert(isArray([]));
      return assert(!isArray(7));
    });
    isDefined = function(x) {
      return x != null;
    };
    context.test("isDefined", function() {
      assert(isDefined({}));
      return assert(!isDefined(void 0));
    });
    GeneratorFunction = (function*() {
      return (yield null);
    }).constructor;
    isGenerator = isType(GeneratorFunction);
    context.test("isGenerator", function() {
      var f;
      f = function*() {
        return (yield true);
      };
      return assert(isGenerator(f));
    });
    isPromise = function(x) {
      return ((x != null ? x.then : void 0) != null) && isFunction(x.then);
    };
    return module.exports = {
      deepEqual: deepEqual,
      type: type,
      isType: isType,
      instanceOf: instanceOf,
      isBoolean: isBoolean,
      isNumber: isNumber,
      isNaN: isNaN,
      isFinite: isFinite,
      isInteger: isInteger,
      isFloat: isFloat,
      isString: isString,
      isFunction: isFunction,
      isObject: isObject,
      isArray: isArray,
      isDefined: isDefined,
      isGenerator: isGenerator,
      isPromise: isPromise
    };
  });

}).call(this);
