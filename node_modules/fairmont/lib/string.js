// Generated by CoffeeScript 1.9.3
(function() {
  var assert, describe, ref;

  ref = require("./helpers"), describe = ref.describe, assert = ref.assert;

  describe("String functions", function(context) {
    var blank, camelCase, capitalize, dashed, htmlEscape, plainText, titleCase, toLower, toString, toUpper, underscored, w;
    toString = function(x) {
      return x.toString();
    };
    toUpper = function(s) {
      return s.toUpperCase();
    };
    toLower = function(s) {
      return s.toLowerCase();
    };
    plainText = function(string) {
      return string.replace(/^[A-Z]/g, function(c) {
        return c.toLowerCase();
      }).replace(/[A-Z]/g, function(c) {
        return " " + (c.toLowerCase());
      }).replace(/\W+/g, " ");
    };
    context.test("plainText", function() {
      assert(plainText("hello-world") === "hello world");
      return assert(plainText("Hello World") === "hello world");
    });
    capitalize = function(string) {
      return string[0].toUpperCase() + string.slice(1);
    };
    context.test("capitalize", function() {
      return assert(capitalize("hello world") === "Hello world");
    });
    titleCase = function(string) {
      return string.toLowerCase().replace(/^(\w)|\W(\w)/g, function(char) {
        return char.toUpperCase();
      });
    };
    context.test("titleCase", function() {
      return assert(titleCase("hello woRld") === "Hello World");
    });
    camelCase = function(string) {
      return string.toLowerCase().replace(/(\W+\w)/g, function(string) {
        return string.trim().toUpperCase();
      });
    };
    context.test("camelCase", function() {
      return assert(camelCase("Hello World") === "helloWorld");
    });
    underscored = function(string) {
      return plainText(string).replace(/\W+/g, "_");
    };
    context.test("underscored", function() {
      return assert(underscored("Hello World") === "hello_world");
    });
    dashed = function(string) {
      return plainText(string).replace(/\W+/g, "-");
    };
    context.test("dashed", function() {
      return assert(dashed("Hello World") === "hello-world");
    });
    htmlEscape = (function() {
      var entities, map, re;
      map = {
        "&": "&amp;",
        "<": "&lt;",
        ">": "&gt;",
        '"': '&quot;',
        "'": '&#39;',
        "/": '&#x2F;'
      };
      entities = Object.keys(map);
      re = new RegExp("" + (entities.join('|')), "g");
      return function(string) {
        return string.replace(re, function(s) {
          return map[s];
        });
      };
    })();
    context.test("htmlEscape", function() {
      return assert.equal(htmlEscape("<a href='foo'>bar & baz</a>"), "&lt;a href=&#39;foo&#39;&gt;bar &amp; baz&lt;&#x2F;a&gt;");
    });
    w = function(string) {
      return string.trim().split(/\s+/);
    };
    context.test("w", function() {
      return assert((w("one two three")).length === 3);
    });
    blank = function(s) {
      return s.length === 0;
    };
    context.test("blank", function() {
      assert(blank(""));
      return assert(!blank("x"));
    });
    return module.exports = {
      toString: toString,
      toUpper: toUpper,
      toLower: toLower,
      capitalize: capitalize,
      titleCase: titleCase,
      camelCase: camelCase,
      underscored: underscored,
      dashed: dashed,
      plainText: plainText,
      htmlEscape: htmlEscape,
      w: w,
      blank: blank
    };
  });

}).call(this);
