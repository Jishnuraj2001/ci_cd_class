// Generated by CoffeeScript 1.9.3
(function() {
  var async, asyncIterator, curry, flow, iterator, pump, reduce, ref, start, tee, throttle,
    slice = [].slice;

  curry = require("fairmont-core").curry;

  async = require("fairmont-helpers").async;

  ref = require("./iterator"), iterator = ref.iterator, asyncIterator = ref.asyncIterator;

  reduce = require("./reducer").reduce;

  flow = function(arg) {
    var fx, i;
    i = arg[0], fx = 2 <= arg.length ? slice.call(arg, 1) : [];
    return reduce(i, (function(i, f) {
      return f(i);
    }), fx);
  };

  start = async(function*(i) {
    var done, ref1, results, value;
    results = [];
    while (true) {
      ref1 = (yield i()), done = ref1.done, value = ref1.value;
      if (done) {
        break;
      } else {
        results.push(void 0);
      }
    }
    return results;
  });

  pump = curry(function(s, i) {
    return asyncIterator(async(function*() {
      var done, ref1, value;
      ref1 = (yield i()), done = ref1.done, value = ref1.value;
      if (!done) {
        return {
          value: s.write(value),
          done: false
        };
      } else {
        s.end();
        return {
          done: done
        };
      }
    }));
  });

  tee = curry(function(f, i) {
    return asyncIterator(async(function*() {
      var done, ref1, value;
      ref1 = (yield i()), done = ref1.done, value = ref1.value;
      if (!done) {
        f(value);
      }
      return {
        done: done,
        value: value
      };
    }));
  });

  throttle = curry(function(ms, i) {
    var last;
    last = 0;
    return asyncIterator(async(function*() {
      var done, now, ref1, value;
      while (true) {
        ref1 = (yield i()), done = ref1.done, value = ref1.value;
        if (done) {
          break;
        }
        now = Date.now();
        if (now - last >= ms) {
          break;
        }
      }
      last = now;
      return {
        done: done,
        value: value
      };
    }));
  });

  module.exports = {
    flow: flow,
    start: start,
    pump: pump,
    tee: tee,
    throttle: throttle
  };

}).call(this);
