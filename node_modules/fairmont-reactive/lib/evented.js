// Generated by CoffeeScript 1.9.3
(function() {
  var EventEmitter, Method, compose, evented, isArray, isDefined, isFunction, isObject, isSource, property, ref;

  EventEmitter = require("events").EventEmitter;

  evented = function(object) {
    var events;
    events = new EventEmitter;
    return events;
  };

  compose = require("fairmont-core").compose;

  ref = require("fairmont-helpers"), isDefined = ref.isDefined, isArray = ref.isArray, isObject = ref.isObject, isFunction = ref.isFunction, property = ref.property;

  Method = require("fairmont-multimethods").Method;

  isSource = compose(isFunction, property("on"));

  evented = Method.create();

  Method.define(evented, isDefined, function(object) {
    return evented(object, new EventEmitter);
  });

  Method.define(evented, isObject, isSource, function(object, events) {
    var fn, key, value;
    Object.observe(object, function() {
      return events.emit("change", object);
    });
    fn = function(key, value) {
      if (isObject(value)) {
        return evented(value, events);
      }
    };
    for (key in object) {
      value = object[key];
      fn(key, value);
    }
    return events;
  });

  Method.define(evented, isArray, isSource, function(object, events) {
    var fn, key, value;
    Array.observe(object, function() {
      return events.emit("change", object);
    });
    fn = function(key, value) {
      if (isObject(value)) {
        return evented(value, events);
      }
    };
    for (key in object) {
      value = object[key];
      fn(key, value);
    }
    return events;
  });

  module.exports = {
    evented: evented
  };

}).call(this);
